This is to react basic.
Igniting the app.
1- npm is the biggest package manager.
2- npm init  - this creates package.json file where we have all necessary things or it just keeps the track of all dependencies.
3- when we do create react app web pack is used as bundler.We need to bundle our file when we want to put it in production.
4- but now as we r using npm we will use parser as bundler.
5 - npm install -D parcel
-> two type of dependency we can install one is dev depedency and there r normal dependency.
dev depedency - is used while dependency
normal - used in production or dev anywhere.
6 - "^2.8.3" this is ^ carrot this is to keep the dependency even there are minor updates.
Ex- 2.8.4 can be "^2.8.3" in package.json
7 - package.lock-json keeps exact track of version

8- parcel can have its own dependecies this is called transitive dependency, that's why we got so many dependencies when we installed parcel.
9 - if u see the node module and see any package it will have its own package.json as it can have their own dependency.
10 - just like we have npm we npx
npm is installing
npx is for execution.
11 - npx parcel index.html will execute parcel.
12 - tell if this is not a browser script this is considered as a module.
#parcel
-Dev Build
-local server
- HMR - Hot Module Replacement
- File Watching Algorithm - written in c++
- caching - Faster build
- Image Optimization
- Minification
- Bundling
- compress
- code splitting
- Differential Bundling - support older browser
- it creates different build for production and develop.
read parcel docs mf

13- i have removed main from package.json as we give entry point when we do code.


1- they replace html thing if u have written.
2 - JSX-it is html like syntax.
const jsxHeading = <h1>Namaste react using jsx</h1>.
3 - 2 ways to create to create html
with react and jsx.
4 - Js engine understands ES6(it can be any version) or echmascript
5 - code is transpilled before it goes to js engine by parcel - parcel has babel which is used to transpile.Babel was installed when we haev installed babel.
6 - the jsx ---> react.createElement ---> react element ----> html element.this conversion is done by babel.
7- function component is js function thaT RETURN react element.

8- A component inside the other component is called component composition.
9 - {} u can write any js code inside this which can be opened in <div></div> fo react functional component.
10- the {} the thing inside {} or jsx is sanitized before rendering as security.  



1 - create div. for different things.
2 - config driven ui 
- our website is driven by data, the ui is driven by data or config.they will send all data to be displayed on ui acording to area or location maybe.
* when u wan to pass js obeject u have to use {}.
3- if it is default export then import resObj or import {resObj}.
4 -  Default export can export only one thing from a js file.
5 - when state variable changes react re-renders the variable.




React concepts lets goooo

Reconciliation Algorithm(React Fibre)
-------------------------------------

React.createElement('h1') => this creates a react object which is virtual dom. when there is difference in virtual dom react re-renders the component.



1- shimmer ui - we load fake page until the actual data is loaded.
2 - whenever the useState variable is changed the react component re-renders.
3 - never declare useState in condition,for loop or function.

Router

1- Install React-router-dom
2 - we have to create routing configuration.
3 - createBrowserRouter - to define configuration.
RouterProvider - to render the router configuration.
4 - There are many router so read documentation.
5 - useRouterError will catch the error and give u as obejct useRouterError()
6 - Outlet is like a tunnel all childeren configuration will be conditionally rendered according to the path.
7 - href will reload the next page.
Link will not reload the the next page, so use Link provide by react router dom.

*8 - a tag href does server side routing because the page reloads.Link does clint side routing as there is not page reload.

Hooks:-
1 - useParams used to extract param from url.
2 - Link is component given by react router dom but behind the scene link is using anchor tag. 

class based component:

constructor(props){
    super(props){
        this.state= {
            count1:2
        }
    }
}
this.setState({}) -> is used to state in functional component
1 - whenever the class is 
2 - flow in class component
    - one component ->constructor -> render -> componentDidMount

    if parent and child is there then:
    - constructor -> render -> child constructor -> child render -> child componentDidMount -> parent componentDidMount

3 - APi calls are made in componentDidMount

    if parent has child1 and child2

    - so p cons -> p render -> 1 cons -> 1 render -> 2 cons -> 2 render -> (DOM is updated with child1 and child2 )-> 1 mount -> 2 mount -> p mount.

    - render over here is virtual dom updation.

4 - https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/     - best diagram for react component life cycle.

5 - see react batches all child1,child2 and then at once manupulates actual DOM as DOM manupulation is expensive .Render in this case means manupalating virtual dom.

6 - useEffect(() => {
    setInterval(() => {
        console.log("namaste");
    },1000);
    return () => {
        console.log("unmounting");   - this works like unmounting function.
    }                       

},[])
console.log("render"); 

7 - The useEffect hook expects the callback function to either return nothing or return a cleanup function. If you make the callback function async, it implicitly returns a promise, which is not the expected behavior. This could lead to unexpected behavior or errors in your component.

8 - chunking,code splitting, dynamic bundling,lazy loading -> u have make or split your code into smaller chunks.


CSS

1- Material UI, Chakra UI, styled-component.
2 - post css is a toll for transforming CSS with javascript.
3 - tail wind css uses postcss



















